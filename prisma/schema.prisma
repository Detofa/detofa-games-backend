generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum VideoGender {
  MALE
  FEMALE
  BOTH
}

enum Game {
  SNAKE
  FLAPPY_BIRD
  TETRIS
  MATH_DIVISION
}

enum UserStatus {
  USER
  ADMIN
  STAFF
  FILEDTEAM
  SNAKEADMIN
  TETRISADMIN
  FLAPPYBIRDADMIN
}

model User {
  id         String      @id @default(cuid())
  email      String
  password   String?
  name       String?
  phone      String?     @unique
  country    String?
  city       String?
  parent     String?
  imageUrl   String?
  account    Int         @default(0)
  gender     Gender?
  status     UserStatus  @default(USER)
  scores     Score[]
  videos     Video[] // Added this field
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  VideoView  VideoView[]
  ordersMade Order[]     @relation("OrderUser")

  // Orders delivered by this user (delivery guy role)
  ordersDelivered      Order[]       @relation("OrderDelivery")
  sentTransactions     Transaction[] @relation("SentTransactions")
  receivedTransactions Transaction[] @relation("ReceivedTransactions")
}

model Transaction {
  id         String @id @default(cuid())
  fromUser   User   @relation("SentTransactions", fields: [fromUserId], references: [id])
  fromUserId String

  toUser   User   @relation("ReceivedTransactions", fields: [toUserId], references: [id])
  toUserId String

  amount         Int // Total amount transferred (not including fee)
  transactionFee Int @default(0) // Fee charged for the transaction

  note      String?
  createdAt DateTime @default(now())

  @@index([fromUserId])
  @@index([toUserId])
}

model Score {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  game      Game
  score     Int
  times     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, game, times, createdAt])
}

model Video {
  id          String       @id @default(uuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  company     String
  type        String
  videoPoint  Int
  vidSource   String
  viewsNumber Int          @default(0)
  viewLimit   Int          @default(10)
  gender      VideoGender?
  ltage       Int?         @default(3) // Less than age limit
  gtage       Int?         @default(100) // Greater than age limit
  town        String?
  country     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  VideoView   VideoView[]

  @@index([userId])
}

model VideoView {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  video    Video    @relation(fields: [videoId], references: [id])
  videoId  String
  viewedAt DateTime @default(now())

  @@unique([userId, videoId]) // Prevents duplicate views per user unless you want to allow multiple
}

model Product {
  id          String          @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int             @default(0)
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
  images      ProductImage[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  orders      OrderItem[]
}

model ProductCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  slug        String    @unique // URL-friendly version of name
  isActive    Boolean   @default(true)
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProductImage {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  imageUrl  String
  altText   String? // Optional alt text for accessibility
  isPrimary Boolean  @default(false) // Flag to mark primary image
  order     Int      @default(0) // For ordering images
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([productId, isPrimary])
}

model Order {
  id     String @id @default(cuid())
  user   User   @relation("OrderUser", fields: [userId], references: [id])
  userId String

  deliveryGuy   User?   @relation("OrderDelivery", fields: [deliveryGuyId], references: [id])
  deliveryGuyId String? // Nullable until assigned

  totalAmount Float
  status      OrderStatus       @default(PENDING)
  orderItems  OrderItem[]
  tracking    LocationTracking?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

model LocationTracking {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @unique
  latitude  Float
  longitude Float
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}
